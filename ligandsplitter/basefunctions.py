"""Provide the primary functions."""
import sys, os
import random
import requests
import rcsb-api
from rcsb-api.search import AttributeQuery, Attr, TextQuery, ChemSimilarityQuery
import ipywidgets as widgets
from ipywidgets import FileUpload, Dropdown, Text, Layout, Label, Box, HBox, Button, Output
from IPython.display import display

def create_folders():
    """
    Create data path/dir and sub folders for each file type, return error if exists

    Returns
    -------
    current_dir : String
        Current directory that is in use.
    """

    global current_dir
    current_dir = os.getcwd()
    dataPath = os.path.join(current_dir, "data")
    try:
        os.mkdir(dataPath)
    except OSError as error:
        print(error)

    # create pdb file path/dir, return error if exists
    pdbPath = os.path.join(dataPath, "PDB_files")
    try:
        os.mkdir(pdbPath)
    except OSError as error:
        print(error)

    # create mol2 file path/dir, return error if exists
    mol2Path = os.path.join(dataPath, "MOL2_files")
    try:
        os.mkdir(mol2Path)
    except OSError as error:
        print(error)

    # create pdbqt file path/dir, return error if exists
    pdbqtPath = os.path.join(dataPath, "PDBQT_files")
    try:
        os.mkdir(pdbqtPath)
    except OSError as error:
        print(error)

    # create test file path/dir, return error if exists
    testPath = os.path.join(dataPath, "test_files")
    try:
        os.mkdir(testPath)
    except OSError as error:
        print(error)
    
    return current_dir

def convert_type(start_type):
    """
    Determine if the start_type is a string or an integer.

    Parameters
    ----------
    start_type : String or int

    Returns
    -------
    bool
        If the start_type is a string, bool is False; if an integer, bool is True.
    """

    try:
        isinstance(int(start_type), int)  
        return True
    except ValueError:
        return False

def test_pull():
    """
    Create a query to pull a random PDB ID from the RCSB database.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """
    q1 = AttributeQuery(attribute = "rcsb_entry_info.selected_polymer_entity_types", operator = "exact_match", value = "Protein (only)")
    q2 = AttributeQuery(attribute = "rcsb_polymer_entity.formula_weight", operator = "less_or_equal", value = 300)
    q3 = AttributeQuery(attribute = "pdbx_database_status.pdb_format_compatible", operator = "exact_match", value = "Y")
    query = q1 & q2 & q3
    global result_random
    result_random = list(query())

def on_button_clicked(b):
    """
    Callback function for the button click event. It retrieves a random PDB ID from the RCSB database and displays it.

    Parameters
    ----------
    b: Button

    Returns
    -------
    None
    """
    global new_name
    with output:
        print("Loading...")
        new_name = random.choice(result_random)
        print(f"PDB ID retieved: {new_name}")

def pull_random():
    """
    Pull a random PDB ID from the RCSB database.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """
    lucky = Button(description="I'm feeling lucky",
               disabled=False,
               button_style='',
               tooltip='Click me to generate a random PDB ID',
               icon='check')
    global output
    output = widgets.Output()
    display(lucky, output)
    lucky.on_click(on_button_clicked)

def get_new_name():
    """
    Return name of PDB ID generated by the random button.

    Parameters
    ----------
    None

    Returns
    -------
    new_name : String
        PDB ID generated by the random button.
    """
    return new_name

if __name__ == "__main__":
    # Do something if this file is invoked on its own
    create_folders()
